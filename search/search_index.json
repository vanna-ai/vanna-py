{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Vanna.AI?","text":""},{"location":"#what-is-vannaai","title":"What is Vanna.AI?","text":"<p>Vanna.AI is a platform that allows you to ask questions about your data in plain English. It is an AI-powered data analyst that can answer questions about your data, generate SQL, and create visualizations.</p> <p>Each organization has its own isolated training set. This means that Vanna.AI can understand the unique language of your organization and answer questions about your data.</p> <p>After every question you can tell Vanna.AI whether the results were correct. This allows Vanna.AI to learn from the questions that are asked and become smarter immediately.</p> <p>Vanna provides additional functionality to manage your training data to maintain the highest level of accuracy for your organization.</p>"},{"location":"#what-can-it-do","title":"What can it do?","text":""},{"location":"#where-can-i-use-vannaai","title":"Where can I use Vanna.AI?","text":"<ul> <li>Use in a Streamlit app</li> <li>Use in Jupyter Notebooks</li> <li>Add a Slack bot that responds to <code>/askvanna [question]</code></li> <li>Use in a Python app</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#how-do-i-install-the-vannaai-library","title":"How do I install the Vanna.AI library?","text":"<pre><code>pip install vanna\n</code></pre>"},{"location":"getting-started/#how-do-i-import-the-vannaai-library","title":"How do I import the Vanna.AI library?","text":"<pre><code>import vanna as vn\n</code></pre>"},{"location":"getting-started/#how-do-i-set-my-api-key","title":"How do I set my API key?","text":"<pre><code>vn.api_key = 'vanna-key-...'\n</code></pre>"},{"location":"getting-started/#how-do-i-set-my-organization-name","title":"How do I set my organization name?","text":"<p><code>vn.set_org</code> <pre><code>vn.set_org('my_org')\n</code></pre></p>"},{"location":"getting-started/#how-do-i-train-vannaai-on-my-data","title":"How do I train Vanna.AI on my data?","text":"<p><code>vn.store_sql</code> <pre><code>vn.store_sql(\n    question=\"Who are the top 10 customers by Sales?\", \n    sql=\"SELECT customer_name, sales FROM customers ORDER BY sales DESC LIMIT 10\"\n)\n</code></pre></p>"},{"location":"getting-started/#how-do-i-ask-questions-about-my-data","title":"How do I ask questions about my data?","text":"<p><code>vn.generate_sql</code> <pre><code>my_question = 'What are the top 10 ABC by XYZ?'\n\nsql = vn.generate_sql(question=my_question, error_msg=None)\n# SELECT * FROM table_name WHERE column_name = 'value'\n</code></pre></p>"},{"location":"getting-started/#full-example","title":"Full Example","text":"<pre><code>import vanna as vn\n\nvn.api_key = 'vanna-key-...' # Set your API key\nvn.set_org('') # Set your organization name\n\n# Train Vanna.AI on your data\nvn.store_sql(\n    question=\"Who are the top 10 customers by Sales?\", \n    sql=\"SELECT customer_name, sales FROM customers ORDER BY sales DESC LIMIT 10\"\n)\n\n# Ask questions about your data\nmy_question = 'What are the top 10 ABC by XYZ?'\n\n# Generate SQL\nsql = vn.generate_sql(question=my_question, error_msg=None) \n\n# Connect to your database\nconn = snowflake.connector.connect(\n        user='my_user',\n        password='my_password',\n        account='my_account',\n        database='my_database',\n    )\n\ncs = conn.cursor()\n\n# Get results\ndf = vn.get_results(\n    cs=cs, \n    default_db=my_default_db, \n    sql=sql\n    )\n\n# Generate Plotly code\nplotly_code = vn.generate_plotly_code(\n    question=my_question, \n    sql=sql, \n    df=df\n    )\n\n# Get Plotly figure\nfig = vn.get_plotly_figure(\n    plotly_code=plotly_code, \n    df=df\n    )\n</code></pre>"},{"location":"jupyter/","title":"Using Vanna.AI in a Jupyter Notebook","text":"<p>Vanna.AI can be used in a Jupyter Notebook to generate SQL from natural language questions.</p>"},{"location":"jupyter/#installation","title":"Installation","text":"<pre><code>%pip install vanna\n</code></pre>"},{"location":"jupyter/#import","title":"Import","text":"<pre><code>import vanna as vn\n</code></pre>"},{"location":"jupyter/#set-api-key","title":"Set API Key","text":"<pre><code>vn.api_key = 'vanna-key-...'\n</code></pre>"},{"location":"jupyter/#set-organization-name","title":"Set Organization Name","text":"<pre><code>vn.set_org('my_org')\n</code></pre>"},{"location":"jupyter/#train-vannaai-on-your-data","title":"Train Vanna.AI on your data","text":"<pre><code>vn.store_sql(\n    question=\"Who are the top 10 customers by Sales?\", \n    sql=\"SELECT customer_name, sales FROM customers ORDER BY sales DESC LIMIT 10\"\n)\n</code></pre>"},{"location":"jupyter/#ask-questions-about-your-data","title":"Ask questions about your data","text":"<pre><code>my_question = 'What are the top 10 ABC by XYZ?'\n\n# Generate SQL\nsql = vn.generate_sql(question=my_question, error_msg=None)\n# SELECT * FROM table_name WHERE column_name = 'value'\n</code></pre>"},{"location":"jupyter/#run-sql","title":"Run SQL","text":"<p>Run your SQL as you normally would.</p>"},{"location":"onboarding/","title":"Onboarding","text":""},{"location":"onboarding/#what-do-i-need-to-do-to-use-vannaai","title":"What do I need to do to use Vanna.AI?","text":"<p>Vanna.AI uses a combination of documentation and historical question and SQL pairs to generate SQL from natural language.</p>"},{"location":"onboarding/#step-1-train-vannaai","title":"Step 1: Train Vanna.AI","text":"<ul> <li>Give Vanna.AI sample SQL</li> <li>Vanna.AI will try to guess the question</li> <li>Verify the question is correct <pre><code>flowchart LR\n    Generate[vn.generate_question]\n    Question[Question]\n    Verify{Is the question correct?}\n    SQL --&gt; Generate\n    Generate --&gt; Question\n    Question --&gt; Verify\n    Verify -- Yes --&gt; Store[vn.store_sql]\n    Verify -- No --&gt; Update[Update the Question]\n    Update --&gt; Store\n</code></pre></li> </ul>"},{"location":"onboarding/#step-2-ask-vannaai-a-question","title":"Step 2: Ask Vanna.AI a Question","text":"<pre><code>flowchart LR\n    Question[Question]\n    Generate[vn.generate_sql]\n    SQL[SQL]\n    Question --&gt; Generate\n    Generate --&gt; SQL    </code></pre>"},{"location":"pricing/","title":"Pricing","text":"Free Tier Paid Tier Price Free $500/month Documentation Storage 100 chunks 10,000 chunks Question Storage 1,000 questions 10,000 questions Multi-User No Yes Support Discord Email, Slack, Phone"},{"location":"reference/","title":"Vanna Package Full Reference","text":""},{"location":"reference/#vanna--what-is-vannaai","title":"What is Vanna.AI?","text":"<p>Vanna.AI is a platform that allows you to ask questions about your data in plain English. It is an AI-powered data analyst that can answer questions about your data, generate SQL, and create visualizations.</p>"},{"location":"reference/#vanna--api-reference","title":"API Reference","text":""},{"location":"reference/#vanna.ask","title":"<code>ask(question)</code>","text":""},{"location":"reference/#vanna.ask--example","title":"Example","text":"<pre><code>vn.ask(question=\"What is the average salary of employees?\")\n# SELECT AVG(salary) FROM employees\n</code></pre> <p>Ask a question using the Vanna.AI API. This is equivalent to calling <code>generate_sql()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to ask.</p> required <p>Returns:</p> Type Description <code>str</code> <p>str or None: The SQL query, or None if an error occurred.</p>"},{"location":"reference/#vanna.create_org","title":"<code>create_org(org, db_type)</code>","text":""},{"location":"reference/#vanna.create_org--example","title":"Example","text":"<pre><code>vn.create_org(org=\"my-org\", db_type=\"postgres\")\n</code></pre> <p>Create a new organization.</p> <p>Parameters:</p> Name Type Description Default <code>org</code> <code>str</code> <p>The name of the organization to create.</p> required <code>db_type</code> <code>str</code> <p>The type of database to use for the organization. This can be \"Snowflake\", \"BigQuery\", \"Postgres\", or anything else.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the organization was created successfully, False otherwise.</p>"},{"location":"reference/#vanna.flag_sql_for_review","title":"<code>flag_sql_for_review(question, sql=None, error_msg=None)</code>","text":""},{"location":"reference/#vanna.flag_sql_for_review--example","title":"Example","text":"<p><pre><code>vn.flag_sql_for_review(question=\"What is the average salary of employees?\")\n</code></pre> Flag a question and its corresponding SQL query for review. You can later retrieve the flagged questions using <code>get_flagged_questions()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to flag.</p> required <code>sql</code> <code>str</code> <p>The SQL query to flag.</p> <code>None</code> <code>error_msg</code> <code>str</code> <p>The error message to flag.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the question and SQL query were flagged successfully, False otherwise.</p>"},{"location":"reference/#vanna.generate_explanation","title":"<code>generate_explanation(sql)</code>","text":""},{"location":"reference/#vanna.generate_explanation--example","title":"Example","text":"<pre><code>vn.generate_explanation(sql=\"SELECT * FROM students WHERE name = 'John Doe'\")\n# 'This query selects all columns from the students table where the name is John Doe.'\n</code></pre> <p>Generate an explanation of an SQL query using the Vanna.AI API.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to generate an explanation for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>str or None: The explanation, or None if an error occurred.</p>"},{"location":"reference/#vanna.generate_plotly_code","title":"<code>generate_plotly_code(question, sql, df)</code>","text":""},{"location":"reference/#vanna.generate_plotly_code--example","title":"Example","text":"<p><pre><code>vn.generate_plotly_code(\n    question=\"What is the average salary of employees?\",\n    sql=\"SELECT AVG(salary) FROM employees\",\n    df=df\n)\n# fig = px.bar(df, x=\"name\", y=\"salary\")\n</code></pre> Generate Plotly code using the Vanna.AI API.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to generate Plotly code for.</p> required <code>sql</code> <code>str</code> <p>The SQL query to generate Plotly code for.</p> required <code>df</code> <code>pd.DataFrame</code> <p>The dataframe to generate Plotly code for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>str or None: The Plotly code, or None if an error occurred.</p>"},{"location":"reference/#vanna.generate_question","title":"<code>generate_question(sql)</code>","text":""},{"location":"reference/#vanna.generate_question--example","title":"Example","text":"<pre><code>vn.generate_question(sql=\"SELECT * FROM students WHERE name = 'John Doe'\")\n# 'What is the name of the student?'\n</code></pre> <p>Generate a question from an SQL query using the Vanna.AI API.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to generate a question for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>str or None: The question, or None if an error occurred.</p>"},{"location":"reference/#vanna.generate_sql","title":"<code>generate_sql(question)</code>","text":""},{"location":"reference/#vanna.generate_sql--example","title":"Example","text":"<pre><code>vn.generate_sql(question=\"What is the average salary of employees?\")\n# SELECT AVG(salary) FROM employees\n</code></pre> <p>Generate an SQL query using the Vanna.AI API.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to generate an SQL query for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>str or None: The SQL query, or None if an error occurred.</p>"},{"location":"reference/#vanna.get_accuracy_stats","title":"<code>get_accuracy_stats()</code>","text":""},{"location":"reference/#vanna.get_accuracy_stats--example","title":"Example","text":"<pre><code>vn.get_accuracy_stats()\n</code></pre> <p>Get the accuracy statistics from the Vanna.AI API.</p> <p>Returns:</p> Type Description <code>AccuracyStats</code> <p>dict or None: The accuracy statistics, or None if an error occurred.</p>"},{"location":"reference/#vanna.get_flagged_questions","title":"<code>get_flagged_questions()</code>","text":""},{"location":"reference/#vanna.get_flagged_questions--example","title":"Example","text":"<pre><code>questions = vn.get_flagged_questions()\n</code></pre> <p>Get a list of flagged questions from the Vanna.AI API.</p> <p>Returns:</p> Type Description <code>QuestionList</code> <p>List[FullQuestionDocument] or None: The list of flagged questions, or None if an error occurred.</p>"},{"location":"reference/#vanna.get_plotly_figure","title":"<code>get_plotly_figure(plotly_code, df, dark_mode=True)</code>","text":""},{"location":"reference/#vanna.get_plotly_figure--example","title":"Example","text":"<p><pre><code>fig = vn.get_plotly_figure(\n    plotly_code=\"fig = px.bar(df, x='name', y='salary')\",\n    df=df\n)\nfig.show()\n</code></pre> Get a Plotly figure from a dataframe and Plotly code.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.DataFrame</code> <p>The dataframe to use.</p> required <code>plotly_code</code> <code>str</code> <p>The Plotly code to use.</p> required <p>Returns:</p> Type Description <code>plotly.graph_objs.Figure</code> <p>plotly.graph_objs.Figure: The Plotly figure.</p>"},{"location":"reference/#vanna.get_results","title":"<code>get_results(cs, default_database, sql)</code>","text":""},{"location":"reference/#vanna.get_results--example","title":"Example","text":"<p><pre><code>df = vn.get_results(cs=cs, default_database=\"PUBLIC\", sql=\"SELECT * FROM students\")\n</code></pre> Run the SQL query and return the results as a pandas dataframe. This is just a helper function that does not use the Vanna.AI API.</p> <p>Parameters:</p> Name Type Description Default <code>cs</code> <p>Snowflake connection cursor.</p> required <code>default_database</code> <code>str</code> <p>The default database to use.</p> required <code>sql</code> <code>str</code> <p>The SQL query to execute.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>pd.DataFrame: The results of the SQL query.</p>"},{"location":"reference/#vanna.list_orgs","title":"<code>list_orgs()</code>","text":""},{"location":"reference/#vanna.list_orgs--example","title":"Example","text":"<pre><code>orgs = vn.list_orgs()\n</code></pre> <p>List the organizations that the user is a member of.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of organization names.</p>"},{"location":"reference/#vanna.login","title":"<code>login(email, otp_code=None)</code>","text":""},{"location":"reference/#vanna.login--example","title":"Example","text":"<pre><code>vn.login(email=\"username@example.com\")\n</code></pre> <p>Login to the Vanna.AI API.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The email address to login with.</p> required <code>otp_code</code> <code>Union[str, None]</code> <p>The OTP code to login with. If None, an OTP code will be sent to the email address.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the login was successful, False otherwise.</p>"},{"location":"reference/#vanna.remove_sql","title":"<code>remove_sql(question)</code>","text":""},{"location":"reference/#vanna.remove_sql--example","title":"Example","text":"<p><pre><code>vn.remove_sql(question=\"What is the average salary of employees?\")\n</code></pre> Remove a question and its corresponding SQL query from the Vanna.AI database.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to remove.</p> required"},{"location":"reference/#vanna.set_org","title":"<code>set_org(org)</code>","text":""},{"location":"reference/#vanna.set_org--example","title":"Example","text":"<pre><code>vn.set_org(\"my-org\")\n</code></pre> <p>Set the organization name for the Vanna.AI API.</p> <p>Parameters:</p> Name Type Description Default <code>org</code> <code>str</code> <p>The organization name.</p> required"},{"location":"reference/#vanna.store_sql","title":"<code>store_sql(question, sql)</code>","text":""},{"location":"reference/#vanna.store_sql--example","title":"Example","text":"<pre><code>vn.store_sql(\n    question=\"What is the average salary of employees?\", \n    sql=\"SELECT AVG(salary) FROM employees\"\n)\n</code></pre> <p>Store a question and its corresponding SQL query in the Vanna.AI database.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to store.</p> required <code>sql</code> <code>str</code> <p>The SQL query to store.</p> required"},{"location":"reference/#vanna.train","title":"<code>train(question, sql)</code>","text":""},{"location":"reference/#vanna.train--example","title":"Example","text":"<pre><code>vn.train(\n    question=\"What is the average salary of employees?\", \n    sql=\"SELECT AVG(salary) FROM employees\"\n)\n</code></pre> <p>Train Vanna.AI on a question and its corresponding SQL query. This is equivalent to calling <code>store_sql()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to train on.</p> required <code>sql</code> <code>str</code> <p>The SQL query to train on.</p> required"},{"location":"slack/","title":"Vanna.AI Slack App","text":"<p>Coming Soon</p>"},{"location":"streamlit/","title":"Use Vanna.AI with Streamlit","text":""},{"location":"streamlit/#app","title":"App","text":""},{"location":"streamlit/#code","title":"Code","text":"<p>https://github.com/vanna-ai/vanna-streamlit</p>"},{"location":"support/","title":"Getting Support","text":"<p>E-mail us at support@vanna.ai</p> <p>Join our Slack</p>"},{"location":"vanna-py-overview/","title":"Vanna py overview","text":""},{"location":"vanna-py-overview/#vannaai","title":"Vanna.AI","text":""},{"location":"vanna-py-overview/#python-package","title":"Python Package","text":"<p>For Natural Language to SQL (and associated functionality)</p> <p>Full Documentation Reference</p> <p>Slack</p> <p>support@vanna.ai</p>"},{"location":"vanna-py-overview/#what-can-you-do-with-vannaai","title":"What can you do with Vanna.AI?","text":"<p>Vanna.AI has a Python package that allows you to convert natural language to SQL.</p> <pre><code>import vanna as vn\n\nvn.api_key = 'vanna-key-...' # Set your API key\nvn.set_org('') # Set your organization name\n\nmy_question = 'What are the top 10 ABC by XYZ?'\n\nsql = vn.generate_sql(question=my_question, error_msg=None) \n# SELECT * FROM table_name WHERE column_name = 'value'\n\n(my_df, error_msg) = vn.run_sql(cs: snowflake.Cursor, sql=sql)\n\nvn.generate_plotly_code(question=my_question, df=my_df)\n# fig = px.bar(df, x='column_name', y='column_name')\n\nvn.run_plotly_code(plotly_code=fig, df=my_df)\n</code></pre>"},{"location":"vanna-py-overview/#installation","title":"Installation","text":""},{"location":"vanna-py-overview/#global-installation","title":"Global Installation","text":"<p><pre><code>pip install vanna\n</code></pre> or <pre><code>pip3 install vanna\n</code></pre></p>"},{"location":"vanna-py-overview/#use-a-virtual-environment","title":"Use a Virtual Environment","text":"<pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install vanna\n</code></pre>"},{"location":"workflow/","title":"What's the Workflow?","text":"<pre><code>flowchart TD\n    DB[(Known Correct Question-SQL)]\n    Try[Try to Use DDL/Documentation]\n    SQL(SQL)\n    Check{Is the SQL correct?}\n    Generate[fa:fa-circle-question Use Examples to Generate]\n    DB --&gt; Find\n    Question[fa:fa-circle-question Question] --&gt; Find{fa:fa-magnifying-glass Do we have similar questions?}\n    Find -- Yes --&gt; Generate\n    Find -- No --&gt; Try\n    Generate --&gt; SQL\n    Try --&gt; SQL\n    SQL --&gt; Check\n    Check -- Yes --&gt; DB\n    Check -- No --&gt; Analyst[fa:fa-glasses Analyst Writes the SQL]\n    Analyst -- Adds --&gt; DB</code></pre>"}]}